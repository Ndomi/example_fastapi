[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.orm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "models,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models.",
        "description": "models.",
        "detail": "models.",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "sqlalchemy.sql.functions",
        "description": "sqlalchemy.sql.functions",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.functions",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "schema,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schema.",
        "description": "schema.",
        "detail": "schema.",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "response",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "oauth2",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "oauth2",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "posts",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "vote",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "prefix",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "true",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic.types",
        "description": "pydantic.types",
        "isExtraImport": true,
        "detail": "pydantic.types",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.0b067979d2b4_add_user_table",
        "description": "alembic.versions.0b067979d2b4_add_user_table",
        "peekOfCode": "def upgrade():\n    op.create_table('users',\n                    sa.Column('id', sa.Integer(), nullable=False),\n                    sa.Column('email', sa.String(), nullable=False),\n                    sa.Column('password', sa.String(), nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),\n                    sa.PrimaryKeyConstraint('id'),\n                    sa.UniqueConstraint('email')\n                    )",
        "detail": "alembic.versions.0b067979d2b4_add_user_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.0b067979d2b4_add_user_table",
        "description": "alembic.versions.0b067979d2b4_add_user_table",
        "peekOfCode": "def downgrade():\n    op.drop_table('users')\n    pass",
        "detail": "alembic.versions.0b067979d2b4_add_user_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "alembic.versions.0b067979d2b4_add_user_table",
        "description": "alembic.versions.0b067979d2b4_add_user_table",
        "peekOfCode": "revision = '0b067979d2b4'\ndown_revision = 'd1cff2d05d44'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('users',\n                    sa.Column('id', sa.Integer(), nullable=False),\n                    sa.Column('email', sa.String(), nullable=False),\n                    sa.Column('password', sa.String(), nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),",
        "detail": "alembic.versions.0b067979d2b4_add_user_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "alembic.versions.0b067979d2b4_add_user_table",
        "description": "alembic.versions.0b067979d2b4_add_user_table",
        "peekOfCode": "down_revision = 'd1cff2d05d44'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('users',\n                    sa.Column('id', sa.Integer(), nullable=False),\n                    sa.Column('email', sa.String(), nullable=False),\n                    sa.Column('password', sa.String(), nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),",
        "detail": "alembic.versions.0b067979d2b4_add_user_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "alembic.versions.0b067979d2b4_add_user_table",
        "description": "alembic.versions.0b067979d2b4_add_user_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('users',\n                    sa.Column('id', sa.Integer(), nullable=False),\n                    sa.Column('email', sa.String(), nullable=False),\n                    sa.Column('password', sa.String(), nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),\n                    sa.PrimaryKeyConstraint('id'),",
        "detail": "alembic.versions.0b067979d2b4_add_user_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "alembic.versions.0b067979d2b4_add_user_table",
        "description": "alembic.versions.0b067979d2b4_add_user_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.create_table('users',\n                    sa.Column('id', sa.Integer(), nullable=False),\n                    sa.Column('email', sa.String(), nullable=False),\n                    sa.Column('password', sa.String(), nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),\n                    sa.PrimaryKeyConstraint('id'),\n                    sa.UniqueConstraint('email')",
        "detail": "alembic.versions.0b067979d2b4_add_user_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.20e3eab0b62b_create_post_table",
        "description": "alembic.versions.20e3eab0b62b_create_post_table",
        "peekOfCode": "def upgrade():\n    op.create_table('post', sa.Column('id', sa.Integer(), nullable=False, primary_key=True),\n                    sa.Column('title', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_table('post')\n    pass",
        "detail": "alembic.versions.20e3eab0b62b_create_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.20e3eab0b62b_create_post_table",
        "description": "alembic.versions.20e3eab0b62b_create_post_table",
        "peekOfCode": "def downgrade():\n    op.drop_table('post')\n    pass",
        "detail": "alembic.versions.20e3eab0b62b_create_post_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "alembic.versions.20e3eab0b62b_create_post_table",
        "description": "alembic.versions.20e3eab0b62b_create_post_table",
        "peekOfCode": "revision = '20e3eab0b62b'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('post', sa.Column('id', sa.Integer(), nullable=False, primary_key=True),\n                    sa.Column('title', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_table('post')",
        "detail": "alembic.versions.20e3eab0b62b_create_post_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "alembic.versions.20e3eab0b62b_create_post_table",
        "description": "alembic.versions.20e3eab0b62b_create_post_table",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('post', sa.Column('id', sa.Integer(), nullable=False, primary_key=True),\n                    sa.Column('title', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_table('post')\n    pass",
        "detail": "alembic.versions.20e3eab0b62b_create_post_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "alembic.versions.20e3eab0b62b_create_post_table",
        "description": "alembic.versions.20e3eab0b62b_create_post_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('post', sa.Column('id', sa.Integer(), nullable=False, primary_key=True),\n                    sa.Column('title', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_table('post')\n    pass",
        "detail": "alembic.versions.20e3eab0b62b_create_post_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "alembic.versions.20e3eab0b62b_create_post_table",
        "description": "alembic.versions.20e3eab0b62b_create_post_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.create_table('post', sa.Column('id', sa.Integer(), nullable=False, primary_key=True),\n                    sa.Column('title', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_table('post')\n    pass",
        "detail": "alembic.versions.20e3eab0b62b_create_post_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.9e063e1e2195_auto_vote_py",
        "description": "alembic.versions.9e063e1e2195_auto_vote_py",
        "peekOfCode": "def upgrade():\n    op.create_table('votes',\n        sa.Column('user_id', sa.Integer(), nullable=False),\n        sa.Column('post_id', sa.Integer(), nullable=False),\n        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ondelete='CASCADE'),\n        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),\n        sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )\n    pass\ndef downgrade():",
        "detail": "alembic.versions.9e063e1e2195_auto_vote_py",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.9e063e1e2195_auto_vote_py",
        "description": "alembic.versions.9e063e1e2195_auto_vote_py",
        "peekOfCode": "def downgrade():\n    op.drop_table('votes')\n    pass",
        "detail": "alembic.versions.9e063e1e2195_auto_vote_py",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "alembic.versions.9e063e1e2195_auto_vote_py",
        "description": "alembic.versions.9e063e1e2195_auto_vote_py",
        "peekOfCode": "revision = '9e063e1e2195'\ndown_revision = 'ba1a74812131'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('votes',\n        sa.Column('user_id', sa.Integer(), nullable=False),\n        sa.Column('post_id', sa.Integer(), nullable=False),\n        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ondelete='CASCADE'),\n        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),",
        "detail": "alembic.versions.9e063e1e2195_auto_vote_py",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "alembic.versions.9e063e1e2195_auto_vote_py",
        "description": "alembic.versions.9e063e1e2195_auto_vote_py",
        "peekOfCode": "down_revision = 'ba1a74812131'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('votes',\n        sa.Column('user_id', sa.Integer(), nullable=False),\n        sa.Column('post_id', sa.Integer(), nullable=False),\n        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ondelete='CASCADE'),\n        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),\n        sa.PrimaryKeyConstraint('user_id', 'post_id')",
        "detail": "alembic.versions.9e063e1e2195_auto_vote_py",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "alembic.versions.9e063e1e2195_auto_vote_py",
        "description": "alembic.versions.9e063e1e2195_auto_vote_py",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table('votes',\n        sa.Column('user_id', sa.Integer(), nullable=False),\n        sa.Column('post_id', sa.Integer(), nullable=False),\n        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ondelete='CASCADE'),\n        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),\n        sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )",
        "detail": "alembic.versions.9e063e1e2195_auto_vote_py",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "alembic.versions.9e063e1e2195_auto_vote_py",
        "description": "alembic.versions.9e063e1e2195_auto_vote_py",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.create_table('votes',\n        sa.Column('user_id', sa.Integer(), nullable=False),\n        sa.Column('post_id', sa.Integer(), nullable=False),\n        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ondelete='CASCADE'),\n        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),\n        sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )\n    pass",
        "detail": "alembic.versions.9e063e1e2195_auto_vote_py",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "description": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "peekOfCode": "def upgrade():\n    op.add_column('post', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('post_users_fk', source_table=\"post\", referent_table=\"users\", \n                          local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")    \n    pass\ndef downgrade():\n    op.drop_constraint('post_users_fk', table_name='post')\n    op.drop_column('post', 'owner_id')\n    pass",
        "detail": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "description": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "peekOfCode": "def downgrade():\n    op.drop_constraint('post_users_fk', table_name='post')\n    op.drop_column('post', 'owner_id')\n    pass",
        "detail": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "description": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "peekOfCode": "revision = 'b5c7fb375b4e'\ndown_revision = '0b067979d2b4'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('post_users_fk', source_table=\"post\", referent_table=\"users\", \n                          local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")    \n    pass\ndef downgrade():",
        "detail": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "description": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "peekOfCode": "down_revision = '0b067979d2b4'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('post_users_fk', source_table=\"post\", referent_table=\"users\", \n                          local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")    \n    pass\ndef downgrade():\n    op.drop_constraint('post_users_fk', table_name='post')",
        "detail": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "description": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('post_users_fk', source_table=\"post\", referent_table=\"users\", \n                          local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")    \n    pass\ndef downgrade():\n    op.drop_constraint('post_users_fk', table_name='post')\n    op.drop_column('post', 'owner_id')",
        "detail": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "description": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('post_users_fk', source_table=\"post\", referent_table=\"users\", \n                          local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")    \n    pass\ndef downgrade():\n    op.drop_constraint('post_users_fk', table_name='post')\n    op.drop_column('post', 'owner_id')\n    pass",
        "detail": "alembic.versions.b5c7fb375b4e_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "description": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "peekOfCode": "def upgrade():\n    op.add_column('post', sa.Column(\n        'published', sa.Boolean(), nullable=False, server_default='TRUE'),)\n    op.add_column('post', sa.Column(\n        'created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')),)    \n    pass\ndef downgrade():\n    op.drop_column('post', 'published')\n    op.drop_column('post', 'created_at')\n    pass",
        "detail": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "description": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "peekOfCode": "def downgrade():\n    op.drop_column('post', 'published')\n    op.drop_column('post', 'created_at')\n    pass",
        "detail": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "description": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "peekOfCode": "revision = 'ba1a74812131'\ndown_revision = 'b5c7fb375b4e'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column(\n        'published', sa.Boolean(), nullable=False, server_default='TRUE'),)\n    op.add_column('post', sa.Column(\n        'created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')),)    \n    pass",
        "detail": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "description": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "peekOfCode": "down_revision = 'b5c7fb375b4e'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column(\n        'published', sa.Boolean(), nullable=False, server_default='TRUE'),)\n    op.add_column('post', sa.Column(\n        'created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')),)    \n    pass\ndef downgrade():",
        "detail": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "description": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column(\n        'published', sa.Boolean(), nullable=False, server_default='TRUE'),)\n    op.add_column('post', sa.Column(\n        'created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')),)    \n    pass\ndef downgrade():\n    op.drop_column('post', 'published')",
        "detail": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "description": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column(\n        'published', sa.Boolean(), nullable=False, server_default='TRUE'),)\n    op.add_column('post', sa.Column(\n        'created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')),)    \n    pass\ndef downgrade():\n    op.drop_column('post', 'published')\n    op.drop_column('post', 'created_at')",
        "detail": "alembic.versions.ba1a74812131_add_last_few_columns_to_post_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "description": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "peekOfCode": "def upgrade():\n    op.add_column('post', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_column('post', 'content')\n    pass",
        "detail": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "description": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "peekOfCode": "def downgrade():\n    op.drop_column('post', 'content')\n    pass",
        "detail": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "description": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "peekOfCode": "revision = 'd1cff2d05d44'\ndown_revision = '20e3eab0b62b'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_column('post', 'content')\n    pass",
        "detail": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "description": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "peekOfCode": "down_revision = '20e3eab0b62b'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_column('post', 'content')\n    pass",
        "detail": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "description": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_column('post', 'content')\n    pass",
        "detail": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "description": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.add_column('post', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_column('post', 'content')\n    pass",
        "detail": "alembic.versions.d1cff2d05d44_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "database_username",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "database_username = os.getenv('DATABASE_USERNAME')\ndatabase_password = os.getenv('DATABASE_PASSWORD')\ndatabase_hostname = os.getenv('DATABASE_HOSTNAME')\ndatabase_name= os.getenv('DATABASE_NAME')\nconfig = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f'postgresql://{database_username}:{database_password}@{database_hostname}/{database_name}')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "database_password",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "database_password = os.getenv('DATABASE_PASSWORD')\ndatabase_hostname = os.getenv('DATABASE_HOSTNAME')\ndatabase_name= os.getenv('DATABASE_NAME')\nconfig = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f'postgresql://{database_username}:{database_password}@{database_hostname}/{database_name}')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "database_hostname",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "database_hostname = os.getenv('DATABASE_HOSTNAME')\ndatabase_name= os.getenv('DATABASE_NAME')\nconfig = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f'postgresql://{database_username}:{database_password}@{database_hostname}/{database_name}')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f'postgresql://{database_username}:{database_password}@{database_hostname}/{database_name}')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = None",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = None\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(\n        models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Invalid Credentials\")\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Invalid Credentials\")\n    # create a token",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(tags=['Authentication'])\n@router.post('/login', response_model=schema.Token)\ndef login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(\n        models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Invalid Credentials\")\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.routers.oauth2",
        "description": "app.routers.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        id: str = payload.get(\"user_id\")",
        "detail": "app.routers.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "app.routers.oauth2",
        "description": "app.routers.oauth2",
        "peekOfCode": "def verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        id: str = payload.get(\"user_id\")\n        if id is None:\n            raise credentials_exception\n        token_data = schema.TokenData(id=id)\n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "app.routers.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.routers.oauth2",
        "description": "app.routers.oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):\n    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, \n                                          detail=f\"Could not validate credentials\", \n                                          headers={\"WWW-Authenticate\": \"Bearer\"})\n    token = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "app.routers.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.routers.oauth2",
        "description": "app.routers.oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')\n# SECRET_KEY\nSECRET_KEY = settings.secret_key\n# Alogorithm\nALGORITHM = settings.algorithm\n# Experation Time\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "app.routers.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.routers.oauth2",
        "description": "app.routers.oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\n# Alogorithm\nALGORITHM = settings.algorithm\n# Experation Time\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.routers.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.routers.oauth2",
        "description": "app.routers.oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\n# Experation Time\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):",
        "detail": "app.routers.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.routers.oauth2",
        "description": "app.routers.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "app.routers.oauth2",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def get_posts(db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user), limit: int = 10, skip: int = 0, search: Optional[str] = \"\"):\n    # cursor.execute(\"\"\"SELECT * FROM post\"\"\")\n    # posts = cursor.fetchall()\n    print(limit)\n    # posts = db.query(models.Post).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    posts = db.query(models.Post, func.count(models.Vote.post_id).label(\"votes\")).join(models.Vote, \n                                                                                         models.Vote.post_id == models.Post.id, \n                                                                                         isouter=True).group_by(models.Post.id).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    # Uncomment if you want user to only be able to get their own posts\n    #posts = db.query(models.Post).filter(models.Post.owner_id == current_user.id).all()",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def create_posts(post: schema.PostCreate, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING * \"\"\",\n    #                (post.title, post.content, post.published))\n    # new_post = cursor.fetchone()\n    # conn.commit()\n    new_post = models.Post(owner_id=current_user.id, **post.dict())\n    db.add(new_post)\n    db.commit()\n    db.refresh(new_post)\n    return new_post",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def get_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"SELECT * from post WHERE id = %s\"\"\", (str(id)))\n    # post = cursor.fetchone()\n    # print(test_post)\n    # post = find_post(id)\n    # post = db.query(models.Post).filter(models.Post.id == id).first()\n    post = db.query(models.Post, func.count(models.Vote.post_id).label(\"votes\")).join(\n        models.Vote, models.Vote.post_id == models.Post.id, isouter=True).group_by(models.Post.id).filter(\n            models.Post.id == id).first()\n    if not post:",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def delete_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    # deleting post\n    # cursor.execute(\"\"\"DELETE FROM post WHERE id = %s RETURNING *\"\"\", (str(id)))\n    # delete_post = cursor.fetchone()\n    # conn.commit()\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post with id: {id} does not exist\")",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def update_post(id: int, updated_post: schema.PostCreate, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"UPDATE post SET title = %s, content = %s, published= %s WHERE id = %s RETURNING *\"\"\",\n    #                (post.title, post.content, post.published, str(id)))\n    # updated_post = cursor.fetchone()\n    # conn.commit()\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post with id: {id} does not exist\")",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "router = APIRouter(\n    prefix = \"/posts\",\n    tags = [\"posts\"]\n)\n#@router.get(\"/\", response_model=List[schema.Post])\n@router.get(\"/\", response_model=List[schema.PostOut])\ndef get_posts(db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user), limit: int = 10, skip: int = 0, search: Optional[str] = \"\"):\n    # cursor.execute(\"\"\"SELECT * FROM post\"\"\")\n    # posts = cursor.fetchall()\n    print(limit)",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.users",
        "description": "app.routers.users",
        "peekOfCode": "def create_user(user: schema.UserCreate, db: Session = Depends(get_db)):\n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n@router.get('/{id}', response_model=schema.UserOut)",
        "detail": "app.routers.users",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.users",
        "description": "app.routers.users",
        "peekOfCode": "def get_user(id: int, db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"User with id: {id} does not exist\")\n    return user",
        "detail": "app.routers.users",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.users",
        "description": "app.routers.users",
        "peekOfCode": "router = APIRouter(\n    prefix = \"/users\",\n    tags = [\"users\"]\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schema.UserOut)\ndef create_user(user: schema.UserCreate, db: Session = Depends(get_db)):\n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())",
        "detail": "app.routers.users",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 2,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "def vote(vote: schema.Vote, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id: {vote.post_id} does not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id == vote.post_id, models.Vote.user_id == current_user.id)\n    found_vote = vote_query.first()\n    if (vote.dir == 1):\n        if found_vote:\n            raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=f\"user {current_user.id} has already voted on post {vote.post_id}\")\n        new_vote = models.Vote(post_id = vote.post_id, user_id=current_user.id)",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/vote\",\n    tags=['Vote']\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef vote(vote: schema.Vote, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id: {vote.post_id} does not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id == vote.post_id, models.Vote.user_id == current_user.id)",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def root():\n    return {\"message\": \"welcome to my api!!!!\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(posts.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(posts.router)\napp.include_router(users.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"post\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    published = Column(Boolean, server_default='True', nullable=False)\n    created_at = Column(TIMESTAMP(timezone=true), nullable=False, server_default=text('now()'))\n    owner_id = Column(Integer, ForeignKey('users.id', ondelete=\"CASCADE\"), nullable=False)\n    owner = relationship(\"User\")\nclass User(Base):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=true), nullable=False, server_default=text('now()'))\nclass Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey('users.id', ondelete=\"CASCADE\"), primary_key=True)\n    post_id = Column(Integer, ForeignKey('post.id', ondelete=\"CASCADE\"), primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey('users.id', ondelete=\"CASCADE\"), primary_key=True)\n    post_id = Column(Integer, ForeignKey('post.id', ondelete=\"CASCADE\"), primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True\nclass PostCreate(PostBase):\n    pass\nclass UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class PostCreate(PostBase):\n    pass\nclass UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass Post(PostBase):\n    id: int",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass Post(PostBase):\n    id: int\n    created_at: datetime\n    owner_id: int",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class Post(PostBase):\n    id: int\n    created_at: datetime\n    owner_id: int\n    owner: UserOut\n    class Config:\n        orm_mode = True\nclass PostOut(BaseModel):\n    Post: Post\n    votes: int",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "PostOut",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class PostOut(BaseModel):\n    Post: Post\n    votes: int\n    class Config:\n        orm_mode = True\n################################### USERS ###################################\nclass UserCreate(BaseModel):\n    email: EmailStr\n    password: str\n# class UserOut(BaseModel):",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class UserCreate(BaseModel):\n    email: EmailStr\n    password: str\n# class UserOut(BaseModel):\n#     id: int\n#     email: EmailStr\n#     created_at: datetime\n#     class Config:\n#         orm_mode = True\n################################### AUTHENTICATION ###################################",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\n    # email: Optional[str] = None\nclass Vote(BaseModel):",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\n    # email: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1, ge=0)",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[str] = None\n    # email: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1, ge=0)",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.schema",
        "description": "app.schema",
        "peekOfCode": "class Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1, ge=0)",
        "detail": "app.schema",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    }
]